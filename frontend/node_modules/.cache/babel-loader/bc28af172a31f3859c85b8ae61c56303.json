{"ast":null,"code":"import { useCallback, useState } from 'react';\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, serError] = useState(null); // useCallback нужен, чтобы React не входил в рекурсию\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n    console.log('1');\n    console.log(body);\n    console.log('2');\n\n    if (body) {\n      console.log('3');\n      body1 = JSON.stringfy(body);\n      console.log(body1);\n      console.log('4');\n      headers['Content-Type'] = 'application/json';\n      console.log(headers);\n      console.log('5');\n    }\n\n    try {\n      /*\n      if(body){\n          body = JSON.stringfy(body)\n          headers['Content-Type'] = 'application/json'\n      }\n        */\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      serError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clearError = () => serError(null);\n\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};","map":{"version":3,"sources":["/Users/zimin/Documents/GitHub/verbal_decision_analytics/frontend/src/hooks/http.hook.js"],"names":["useCallback","useState","useHttp","loading","setLoading","error","serError","request","url","method","body","headers","console","log","body1","JSON","stringfy","response","fetch","data","json","e","message","clearError"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,QAArB,QAAoC,OAApC;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAE,KAAF,CAAtC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC,CAFyB,CAIzB;;AACA,QAAMM,OAAO,GAAGP,WAAW,CAAC,OAAOQ,GAAP,EAAYC,MAAM,GAAC,KAAnB,EAA0BC,IAAI,GAAG,IAAjC,EAAuCC,OAAO,GAAC,EAA/C,KAAsD;AAC9EP,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,QAAIH,IAAJ,EAAU;AACNE,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAC,MAAAA,KAAK,GAAGC,IAAI,CAACC,QAAL,CAAcN,IAAd,CAAR;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAF,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACH;;AAED,QAAI;AACA;AACZ;AACA;AACA;AACA;AACA;AAIY,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;AACA,YAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOe,IAAP;AAEH,KAhBD,CAgBC,OAAOE,CAAP,EAAU;AACPjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACe,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACH;AACJ,GApC0B,EAoCxB,EApCwB,CAA3B;;AAsCA,QAAME,UAAU,GAAG,MAAMjB,QAAQ,CAAC,IAAD,CAAjC;;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BkB,IAAAA;AAA1B,GAAP;AACH,CA9CM","sourcesContent":["import {useCallback, useState} from 'react'\nexport const useHttp = () => {\n    const [loading, setLoading] = useState (false)\n    const [error, serError] = useState(null)\n\n    // useCallback нужен, чтобы React не входил в рекурсию\n    const request = useCallback(async (url, method='GET', body = null, headers={}) => {\n        setLoading(true)\n        console.log('1')\n        console.log(body)\n        console.log('2')\n        if (body) {\n            console.log('3')\n            body1 = JSON.stringfy(body)\n            console.log(body1)\n            console.log('4')\n            headers['Content-Type'] = 'application/json'\n            console.log(headers)\n            console.log('5')\n        }\n\n        try {\n            /*\n            if(body){\n                body = JSON.stringfy(body)\n                headers['Content-Type'] = 'application/json'\n            }\n\n             */\n\n\n            const response = await fetch(url, {method, body, headers})\n            const data = await response.json()\n\n            setLoading(false)\n            return data\n\n        }catch (e) {\n            setLoading(false)\n            serError(e.message)\n            throw e\n        }\n    }, [])\n\n    const clearError = () => serError(null)\n\n    return {loading, request, error, clearError}\n}"]},"metadata":{},"sourceType":"module"}